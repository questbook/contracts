IWorkspaceRegistry is re-used:
	- IWorkspaceRegistry (contracts/ApplicationRegistry.sol#7-9)
	- IWorkspaceRegistry (contracts/Grant.sol#5-7)
IERC20 is re-used:
	- IERC20 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#9-82)
	- IERC20 (node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol#9-82)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#name-reused

Contract locking ether found:
	Contract Grant (contracts/Grant.sol#14-176) has payable functions:
	 - Grant.depositFunds(IERC20,uint256) (contracts/Grant.sol#124-131)
	 - Grant.disburseReward(uint96,uint96,IERC20,uint256,address) (contracts/Grant.sol#141-153)
	 - Grant.disburseRewardP2P(uint96,uint96,IERC20,uint256,address) (contracts/Grant.sol#163-175)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether

Reentrancy in ApplicationRegistry.approveMilestone(uint96,uint48,uint96,string,ApplicationRegistry.DisbursalType,IERC20,uint256) (contracts/ApplicationRegistry.sol#261-314):
	External calls:
	- grantRef.disburseReward(_applicationId,_milestoneId,address(_disbursalAsset),_disbursalAmount,msg.sender) (contracts/ApplicationRegistry.sol#287-293)
	- grantRef.disburseRewardP2P(_applicationId,_milestoneId,address(_disbursalAsset),_disbursalAmount,msg.sender) (contracts/ApplicationRegistry.sol#295-301)
	Event emitted after the call(s):
	- MilestoneUpdated(_applicationId,_milestoneId,MilestoneState.Approved,_reasonMetadataHash,block.timestamp) (contracts/ApplicationRegistry.sol#307-313)
Reentrancy in Grant.depositFunds(IERC20,uint256) (contracts/Grant.sol#124-131):
	External calls:
	- require(bool,string)(_erc20Interface.transferFrom(msg.sender,address(this),_amount),Failed to transfer funds) (contracts/Grant.sol#129)
	Event emitted after the call(s):
	- FundsDeposited(address(_erc20Interface),_amount,block.timestamp) (contracts/Grant.sol#130)
Reentrancy in Grant.disburseReward(uint96,uint96,IERC20,uint256,address) (contracts/Grant.sol#141-153):
	External calls:
	- require(bool,string)(_erc20Interface.transfer(applicationReg.getApplicationOwner(_applicationId),_amount),Failed to transfer funds) (contracts/Grant.sol#148-151)
	Event emitted after the call(s):
	- DisburseReward(_applicationId,_milestoneId,address(_erc20Interface),_sender,_amount,block.timestamp) (contracts/Grant.sol#152)
Reentrancy in Grant.disburseRewardP2P(uint96,uint96,IERC20,uint256,address) (contracts/Grant.sol#163-175):
	External calls:
	- require(bool,string)(_erc20Interface.transferFrom(_sender,applicationReg.getApplicationOwner(_applicationId),_amount),Failed to transfer funds) (contracts/Grant.sol#170-173)
	Event emitted after the call(s):
	- DisburseReward(_applicationId,_milestoneId,address(_erc20Interface),_sender,_amount,block.timestamp) (contracts/Grant.sol#174)
Reentrancy in ApplicationRegistry.submitApplication(address,uint96,string,uint48) (contracts/ApplicationRegistry.sol#129-153):
	External calls:
	- grantRef.incrementApplicant() (contracts/ApplicationRegistry.sol#151)
	Event emitted after the call(s):
	- ApplicationSubmitted(_id,_grant,msg.sender,_metadataHash,_milestoneCount,block.timestamp) (contracts/ApplicationRegistry.sol#152)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Different versions of Solidity is used:
	- Version used: ['0.8.10', '^0.8.0', '^0.8.10']
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/security/Pausable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- 0.8.10 (contracts/ApplicationRegistry.sol#2)
	- 0.8.10 (contracts/Grant.sol#2)
	- 0.8.10 (contracts/GrantFactory.sol#2)
	- ^0.8.10 (contracts/MyToken.sol#2)
	- 0.8.10 (contracts/WorkspaceRegistry.sol#2)
	- ^0.8.0 (node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/security/Pausable.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4) allows old versions
Pragma version0.8.10 (contracts/ApplicationRegistry.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version0.8.10 (contracts/Grant.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version0.8.10 (contracts/GrantFactory.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.10 (contracts/MyToken.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version0.8.10 (contracts/WorkspaceRegistry.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
Pragma version^0.8.0 (node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol#4) allows old versions
solc-0.8.10 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

ApplicationRegistry (contracts/ApplicationRegistry.sol#35-333) should inherit from IApplicationRegistry (contracts/Grant.sol#9-11)
WorkspaceRegistry (contracts/WorkspaceRegistry.sol#7-129) should inherit from IWorkspaceRegistry (contracts/ApplicationRegistry.sol#7-9)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-inheritance

Parameter ApplicationRegistry.setWorkspaceReg(IWorkspaceRegistry)._workspaceReg (contracts/ApplicationRegistry.sol#118) is not in mixedCase
Parameter ApplicationRegistry.submitApplication(address,uint96,string,uint48)._grant (contracts/ApplicationRegistry.sol#130) is not in mixedCase
Parameter ApplicationRegistry.submitApplication(address,uint96,string,uint48)._workspaceId (contracts/ApplicationRegistry.sol#131) is not in mixedCase
Parameter ApplicationRegistry.submitApplication(address,uint96,string,uint48)._metadataHash (contracts/ApplicationRegistry.sol#132) is not in mixedCase
Parameter ApplicationRegistry.submitApplication(address,uint96,string,uint48)._milestoneCount (contracts/ApplicationRegistry.sol#133) is not in mixedCase
Parameter ApplicationRegistry.updateApplicationMetadata(uint96,string,uint48)._applicationId (contracts/ApplicationRegistry.sol#161) is not in mixedCase
Parameter ApplicationRegistry.updateApplicationMetadata(uint96,string,uint48)._metadataHash (contracts/ApplicationRegistry.sol#162) is not in mixedCase
Parameter ApplicationRegistry.updateApplicationMetadata(uint96,string,uint48)._milestoneCount (contracts/ApplicationRegistry.sol#163) is not in mixedCase
Parameter ApplicationRegistry.updateApplicationState(uint96,uint96,ApplicationRegistry.ApplicationState,string)._applicationId (contracts/ApplicationRegistry.sol#193) is not in mixedCase
Parameter ApplicationRegistry.updateApplicationState(uint96,uint96,ApplicationRegistry.ApplicationState,string)._workspaceId (contracts/ApplicationRegistry.sol#194) is not in mixedCase
Parameter ApplicationRegistry.updateApplicationState(uint96,uint96,ApplicationRegistry.ApplicationState,string)._state (contracts/ApplicationRegistry.sol#195) is not in mixedCase
Parameter ApplicationRegistry.updateApplicationState(uint96,uint96,ApplicationRegistry.ApplicationState,string)._reasonMetadataHash (contracts/ApplicationRegistry.sol#196) is not in mixedCase
Parameter ApplicationRegistry.requestMilestoneApproval(uint96,uint48,string)._applicationId (contracts/ApplicationRegistry.sol#229) is not in mixedCase
Parameter ApplicationRegistry.requestMilestoneApproval(uint96,uint48,string)._milestoneId (contracts/ApplicationRegistry.sol#230) is not in mixedCase
Parameter ApplicationRegistry.requestMilestoneApproval(uint96,uint48,string)._reasonMetadataHash (contracts/ApplicationRegistry.sol#231) is not in mixedCase
Parameter ApplicationRegistry.approveMilestone(uint96,uint48,uint96,string,ApplicationRegistry.DisbursalType,IERC20,uint256)._applicationId (contracts/ApplicationRegistry.sol#262) is not in mixedCase
Parameter ApplicationRegistry.approveMilestone(uint96,uint48,uint96,string,ApplicationRegistry.DisbursalType,IERC20,uint256)._milestoneId (contracts/ApplicationRegistry.sol#263) is not in mixedCase
Parameter ApplicationRegistry.approveMilestone(uint96,uint48,uint96,string,ApplicationRegistry.DisbursalType,IERC20,uint256)._workspaceId (contracts/ApplicationRegistry.sol#264) is not in mixedCase
Parameter ApplicationRegistry.approveMilestone(uint96,uint48,uint96,string,ApplicationRegistry.DisbursalType,IERC20,uint256)._reasonMetadataHash (contracts/ApplicationRegistry.sol#265) is not in mixedCase
Parameter ApplicationRegistry.approveMilestone(uint96,uint48,uint96,string,ApplicationRegistry.DisbursalType,IERC20,uint256)._disbursalType (contracts/ApplicationRegistry.sol#266) is not in mixedCase
Parameter ApplicationRegistry.approveMilestone(uint96,uint48,uint96,string,ApplicationRegistry.DisbursalType,IERC20,uint256)._disbursalAsset (contracts/ApplicationRegistry.sol#267) is not in mixedCase
Parameter ApplicationRegistry.approveMilestone(uint96,uint48,uint96,string,ApplicationRegistry.DisbursalType,IERC20,uint256)._disbursalAmount (contracts/ApplicationRegistry.sol#268) is not in mixedCase
Parameter ApplicationRegistry.getApplicationOwner(uint96)._applicationId (contracts/ApplicationRegistry.sol#321) is not in mixedCase
Parameter Grant.updateGrant(string)._metadataHash (contracts/Grant.sol#104) is not in mixedCase
Parameter Grant.updateGrantAccessibility(bool)._canAcceptApplication (contracts/Grant.sol#114) is not in mixedCase
Parameter Grant.depositFunds(IERC20,uint256)._erc20Interface (contracts/Grant.sol#124) is not in mixedCase
Parameter Grant.depositFunds(IERC20,uint256)._amount (contracts/Grant.sol#124) is not in mixedCase
Parameter Grant.disburseReward(uint96,uint96,IERC20,uint256,address)._applicationId (contracts/Grant.sol#142) is not in mixedCase
Parameter Grant.disburseReward(uint96,uint96,IERC20,uint256,address)._milestoneId (contracts/Grant.sol#143) is not in mixedCase
Parameter Grant.disburseReward(uint96,uint96,IERC20,uint256,address)._erc20Interface (contracts/Grant.sol#144) is not in mixedCase
Parameter Grant.disburseReward(uint96,uint96,IERC20,uint256,address)._amount (contracts/Grant.sol#145) is not in mixedCase
Parameter Grant.disburseReward(uint96,uint96,IERC20,uint256,address)._sender (contracts/Grant.sol#146) is not in mixedCase
Parameter Grant.disburseRewardP2P(uint96,uint96,IERC20,uint256,address)._applicationId (contracts/Grant.sol#164) is not in mixedCase
Parameter Grant.disburseRewardP2P(uint96,uint96,IERC20,uint256,address)._milestoneId (contracts/Grant.sol#165) is not in mixedCase
Parameter Grant.disburseRewardP2P(uint96,uint96,IERC20,uint256,address)._erc20Interface (contracts/Grant.sol#166) is not in mixedCase
Parameter Grant.disburseRewardP2P(uint96,uint96,IERC20,uint256,address)._amount (contracts/Grant.sol#167) is not in mixedCase
Parameter Grant.disburseRewardP2P(uint96,uint96,IERC20,uint256,address)._sender (contracts/Grant.sol#168) is not in mixedCase
Parameter GrantFactory.createGrant(uint96,string,IWorkspaceRegistry,IApplicationRegistry)._workspaceId (contracts/GrantFactory.sol#22) is not in mixedCase
Parameter GrantFactory.createGrant(uint96,string,IWorkspaceRegistry,IApplicationRegistry)._metadataHash (contracts/GrantFactory.sol#23) is not in mixedCase
Parameter GrantFactory.createGrant(uint96,string,IWorkspaceRegistry,IApplicationRegistry)._workspaceReg (contracts/GrantFactory.sol#24) is not in mixedCase
Parameter GrantFactory.createGrant(uint96,string,IWorkspaceRegistry,IApplicationRegistry)._applicationReg (contracts/GrantFactory.sol#25) is not in mixedCase
Parameter WorkspaceRegistry.createWorkspace(string)._metadataHash (contracts/WorkspaceRegistry.sol#52) is not in mixedCase
Parameter WorkspaceRegistry.updateWorkspaceMetadata(uint96,string)._id (contracts/WorkspaceRegistry.sol#66) is not in mixedCase
Parameter WorkspaceRegistry.updateWorkspaceMetadata(uint96,string)._metadataHash (contracts/WorkspaceRegistry.sol#66) is not in mixedCase
Parameter WorkspaceRegistry.addWorkspaceAdmins(uint96,address[],string[])._id (contracts/WorkspaceRegistry.sol#83) is not in mixedCase
Parameter WorkspaceRegistry.addWorkspaceAdmins(uint96,address[],string[])._admins (contracts/WorkspaceRegistry.sol#84) is not in mixedCase
Parameter WorkspaceRegistry.addWorkspaceAdmins(uint96,address[],string[])._emails (contracts/WorkspaceRegistry.sol#85) is not in mixedCase
Parameter WorkspaceRegistry.removeWorkspaceAdmins(uint96,address[])._id (contracts/WorkspaceRegistry.sol#99) is not in mixedCase
Parameter WorkspaceRegistry.removeWorkspaceAdmins(uint96,address[])._admins (contracts/WorkspaceRegistry.sol#99) is not in mixedCase
Parameter WorkspaceRegistry.isWorkspaceAdmin(uint96,address)._id (contracts/WorkspaceRegistry.sol#118) is not in mixedCase
Parameter WorkspaceRegistry.isWorkspaceAdmin(uint96,address)._address (contracts/WorkspaceRegistry.sol#118) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

renounceOwnership() should be declared external:
	- Ownable.renounceOwnership() (node_modules/@openzeppelin/contracts/access/Ownable.sol#54-56)
transferOwnership(address) should be declared external:
	- Ownable.transferOwnership(address) (node_modules/@openzeppelin/contracts/access/Ownable.sol#62-65)
name() should be declared external:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#62-64)
symbol() should be declared external:
	- ERC20.symbol() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#70-72)
decimals() should be declared external:
	- ERC20.decimals() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#87-89)
totalSupply() should be declared external:
	- ERC20.totalSupply() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#94-96)
balanceOf(address) should be declared external:
	- ERC20.balanceOf(address) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#101-103)
transfer(address,uint256) should be declared external:
	- ERC20.transfer(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#113-116)
allowance(address,address) should be declared external:
	- ERC20.allowance(address,address) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#121-123)
approve(address,uint256) should be declared external:
	- ERC20.approve(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#132-135)
transferFrom(address,address,uint256) should be declared external:
	- ERC20.transferFrom(address,address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#150-164)
increaseAllowance(address,uint256) should be declared external:
	- ERC20.increaseAllowance(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#178-181)
decreaseAllowance(address,uint256) should be declared external:
	- ERC20.decreaseAllowance(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#197-205)
createGrant(uint96,string,IWorkspaceRegistry,IApplicationRegistry) should be declared external:
	- GrantFactory.createGrant(uint96,string,IWorkspaceRegistry,IApplicationRegistry) (contracts/GrantFactory.sol#21-31)
mint(address,uint256) should be declared external:
	- MyToken.mint(address,uint256) (contracts/MyToken.sol#11-13)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
. analyzed (16 contracts with 77 detectors), 90 result(s) found